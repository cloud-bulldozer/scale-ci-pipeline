- job:
    block-downstream: false
    block-upstream: false
    builders:
      - shell: |+
          #!/bin/bash
          set -e
          export RUN_FOLDER=${BUILD_TIMESTAMP}
          echo "INFO: Getting perf-dept keys"
          [[ ! -d "${WORKSPACE}/perf-dept" ]] && git clone --depth=1 https://${GITHUB_TOKEN}@github.com/redhat-performance/perf-dept.git
          export PRIVATE_KEY=${WORKSPACE}/perf-dept/ssh_keys/id_rsa_pbench_ec2
          chmod 600 ${PRIVATE_KEY}

          export OPTIONS="-o StrictHostKeyChecking=no -o ServerAliveInterval=1 -o ConnectionAttempts=100"
          [[ "${USE_PROXY}" == "true" ]] && OPTIONS+=" -o ProxyCommand=\"ssh -i ${PRIVATE_KEY} -W %h:%p ${PROXY_USER}@${PROXY_HOST}\""

          echo "INFO: Grant limits requirements on jump host ${JUMP_HOST}"
          ssh ${OPTIONS} -i ${PRIVATE_KEY} ${SSH_USER}@${JUMP_HOST} 'bash -s' <<ENDSSH
            sudo su -
            set -e
            if [[ ! -f /etc/security/limits.d/perfscale.conf ]] ; then
              echo "${SSH_USER}	hard	nofile	99999" > /etc/security/limits.d/perfscale.conf
              echo "${SSH_USER}	soft	nofile	99999" >> /etc/security/limits.d/perfscale.conf
            fi
            if [[ ! -f /etc/sysctl.d/99-perfscale.conf ]] ; then
              echo "user.max_inotify_instances = 40000" > /etc/sysctl.d/99-perfscale.conf
              echo "user.max_inotify_watches = 40000" >> /etc/sysctl.d/99-perfscale.conf
              sysctl -p
            fi
          ENDSSH

          echo "INFO: Install execution requirements on jenkins host $(hostname -f) with UID ${EUID}"
          set +e
          if [[ ! $(command -v rsync) ]] ; then
            if [[ ${EUID} -ne 0 ]] ; then
              echo "WARNING: Job not running as root, required packages wont be installed"
            else
              if [[ ! $(command -v yum) ]] ; then
                echo "WARNING: 'yum' command not found, required packages wont be installed"
              else
                yum -y install rsync
              fi
            fi
          else
            echo "INFO: rsync tool available on the system"
          fi
          set -e

          echo "INFO: Install execution requirements on jump host ${JUMP_HOST}"
          ssh ${OPTIONS} -i ${PRIVATE_KEY} ${SSH_USER}@${JUMP_HOST} 'bash -s' <<ENDSSH
            eval REMOTE_WORKSPACE=${REMOTE_WORKSPACE}
            echo "INFO: Installing rpm requirements..."
            if [[ ! \$(command -v yum) ]] ; then
              echo "WARNING: 'yum' command not found, required packages wont be installed"
            else
              sudo yum -y install python3 python3-pip golang-bin make
            fi
            echo "INFO: Installing python requirements..."
            mkdir -p ${REMOTE_WORKSPACE}/run-${RUN_FOLDER}
            echo "INFO: Using ${REMOTE_WORKSPACE}/run-${RUN_FOLDER} as working directory on Jump host ${JUMP_HOST}"
            git clone https://github.com/cloud-bulldozer/perfscale-managed-services.git ${REMOTE_WORKSPACE}/run-${RUN_FOLDER}/perfscale-managed-services
            sudo pip3 install -r ${REMOTE_WORKSPACE}/run-${RUN_FOLDER}/perfscale-managed-services/osde2e/requirements.txt
          ENDSSH

          # Run installation script
          echo "INFO: Run installation script"
          ssh ${OPTIONS} -i ${PRIVATE_KEY} ${SSH_USER}@${JUMP_HOST} 'bash -s' <<ENDSSH
            set -e

            # adding ~/go/bin to path to be able to compile osd2e tool
            PATH="\${HOME}/go/bin:\${PATH}"
            export PATH

            # Parameter checks
            WRAPPER_OPTIONS="--path ${REMOTE_WORKSPACE}/run-${RUN_FOLDER}"
            if [ -z ${CONFIG_FILE_LOCATION} ] || [ ! -f ${CONFIG_FILE_LOCATION} ] ; then
              echo "ERROR: Config file ${CONFIG_FILE_LOCATION} not found, exiting..."
              exit 1
            else
              WRAPPER_OPTIONS+=" --account-config ${CONFIG_FILE_LOCATION}"
            fi

            [ ! -z ${CLUSTER_NAME_SEED} ] && WRAPPER_OPTIONS+=" --cluster-name-seed ${CLUSTER_NAME_SEED}"

            [ ! -z ${LOG_LEVEL} ] && WRAPPER_OPTIONS+=" --log-level ${LOG_LEVEL}"
            [ ! -z ${LOG_FILE} ] && WRAPPER_OPTIONS+=" --log-file ${REMOTE_WORKSPACE}/run-${RUN_FOLDER}/${LOG_FILE}"

            [ ! -z "${WRAPPER_ARGUMENTS}" ] && WRAPPER_OPTIONS+=" ${WRAPPER_ARGUMENTS}"

            # Wrapper execution
            echo "INFO: Running python3 ${REMOTE_WORKSPACE}/run-${RUN_FOLDER}/perfscale-managed-services/osde2e/osde2e-wrapper.py \${WRAPPER_OPTIONS}"
            python3 ${REMOTE_WORKSPACE}/run-${RUN_FOLDER}/perfscale-managed-services/osde2e/osde2e-wrapper.py \${WRAPPER_OPTIONS}
          ENDSSH

          # Compress logs before downloading
          echo "INFO: Compress logs before downloading"
          ssh ${OPTIONS} -i ${PRIVATE_KEY} ${SSH_USER}@${JUMP_HOST} 'bash -s' <<ENDSSH
            set -e
            if [ ! -z ${COMPRESS_LOGS} ] && [ ${COMPRESS_LOGS} == "true" ] ; then
              find ${REMOTE_WORKSPACE}/run-${RUN_FOLDER} -type f -name installation.log -execdir gzip {} \;
              if [ ! -z ${LOG_FILE} ] ; then
                find ${REMOTE_WORKSPACE}/run-${RUN_FOLDER} -type f -name ${LOG_FILE} -execdir gzip {} \;
              fi
            fi
          ENDSSH
          # Getting run directory to archive as artifacts
          echo "INFO: Downloading ${REMOTE_WORKSPACE}/run-${RUN_FOLDER} folder from ${JUMP_HOST} to be archieved as artifacts"
          rsync -avzh --exclude='perfscale-managed-services' --exclude='osde2e' --exclude='account_config.yaml' --exclude='*/cluster_account.yaml' -e "ssh ${OPTIONS} -i ${PRIVATE_KEY}" ${SSH_USER}@${JUMP_HOST}:${REMOTE_WORKSPACE}/run-${RUN_FOLDER}/ ${WORKSPACE}/artifacts/
    concurrent: true
    description: OCM installation test on AWS using OSDE2E tool.
    disabled: false
    name: 'SCALE-CI-MS-OSDE2E'
    parameters:
      - password:
          default: ''
          description: "Github token to access github.com/redhat-performance/perf-dept.git repo"
          name: GITHUB_TOKEN
      - parameter-separator:
          separator-style: "border-width: 0;"
          section-header: "<h2 style=\"background-color: #7ea6d3;text-align: center;padding: 4px;color: #343434;font-size: 22px;font-weight: normal;text-transform: uppercase;font-family: 'Orienta', sans-serif;letter-spacing: 1px;font-style: italic;\">Connection to jump host</h2>"
          section-header-style: "font-size: 1em;"
      - string:
          default: ''
          description: "The jump host where executing the wrapper"
          name: JUMP_HOST
      - string:
          default: root
          description: "The user to use when sshing to the JUMP_HOST"
          name: SSH_USER
      - bool:
          default: false
          description: "Use the ProxyCommand to access the JUMP_HOST"
          name: USE_PROXY
      - string:
          default: ''
          description: "The name to use in the ssh ProxyCommand"
          name: PROXY_USER
      - string:
          default: ''
          description: "The server to use in the ssh ProxyCommand"
          name: PROXY_HOST
      - string:
          default: '/var/jenkins'
          description: "Folder on JUMP_HOST where to download scripts and dump results"
          name: REMOTE_WORKSPACE
      - parameter-separator:
          separator-style: "border-width: 0;"
          section-header: "<h2 style=\"background-color: #7ea6d3;text-align: center;padding: 4px;color: #343434;font-size: 22px;font-weight: normal;text-transform: uppercase;font-family: 'Orienta', sans-serif;letter-spacing: 1px;font-style: italic;\">Wrapper configuration</h2>"
          section-header-style: "font-size: 1em;"
      - string:
          default: '/etc/ocm/deploy_config.yml'
          description: "Mapped to <b>--account-config</b>, configuration file required to execute wrapper"
          name: CONFIG_FILE_LOCATION
      - string:
          default: 'osde2e'
          description: "Mapped to <b>--cluster-name-seed</b>, used to generate cluster names, no more than 6 chars are allowed"
          name: CLUSTER_NAME_SEED
      - string:
          default: ''
          description: "
              Rest of arguments to be passed to wrapper execution. Check available options at <a href=\"https://github.com/cloud-bulldozer/perfscale-managed-services/blob/main/osde2e/README.md#variables\">osde2e-wrapper repo</a><br>
              <b>Empty value</b> will select default options for wrapper: 1 cluster installation, no extra machinepool, no data uploaded to elasticsearch, default expiration<br>
              Common used arguments:<br>
              <b>&emsp--command</b>: Location of the osde2e/osde2ectl binaries<br>
              <b>&emsp--cluster-count</b>: Number of clusters to be installed<br>
              <b>&emsp--machinepool-name</b>: Create a new machinepool after cluster installation<br>
              <b>&emsp--es-url</b>: Upload installation data to ElasticSearch
              "
          name: WRAPPER_ARGUMENTS
      - string:
          default: ''
          description: "File name inside $REMOTE_WORKSPACE/run. File will be saved as artifact after execution"
          name: LOG_FILE
      - choice:
          name: LOG_LEVEL
          description: "Mapped to <b>--log-level</b>, log level to show on the console and the logs"
          choices:
            - INFO
            - CRITICAL
            - ERROR
            - WARNING
            - DEBUG
      - parameter-separator:
          separator-style: "border-width: 0;"
          section-header: "<h2 style=\"background-color: #7ea6d3;text-align: center;padding: 4px;color: #343434;font-size: 22px;font-weight: normal;text-transform: uppercase;font-family: 'Orienta', sans-serif;letter-spacing: 1px;font-style: italic;\">Post-execution options</h2>"
          section-header-style: "font-size: 1em;"
      - bool:
          default: false
          description: "Delete all clusters at the end of the job"
          name: CLEANUP_CLUSTERS
      - bool:
          default: true
          description: "Compress log files created before being downloaded in the Jenkins host as artifacts"
          name: COMPRESS_LOGS
    project-type: freestyle
    publishers:
      - postbuildscript:
          builders:
            - role: BOTH
              build-on:
                - SUCCESS
                - FAILURE
                - UNSTABLE
                - NOT_BUILT
                - ABORTED
              build-steps:
                - conditional-step:
                    condition-kind: boolean-expression
                    condition-expression: ${CLEANUP_CLUSTERS}
                    steps:
                      - shell: |+
                          #!/bin/bash
                          set -e
                          echo "INFO: Getting perf-dept keys"
                          export RUN_FOLDER=${BUILD_TIMESTAMP}
                          export PRIVATE_KEY=${WORKSPACE}/perf-dept/ssh_keys/id_rsa_pbench_ec2
                          export OPTIONS="-o StrictHostKeyChecking=no -o ServerAliveInterval=1 -o ConnectionAttempts=100"
                          [[ "${USE_PROXY}" == "true" ]] && OPTIONS+=" -o ProxyCommand=\"ssh -i ${PRIVATE_KEY} -W %h:%p ${PROXY_USER}@${PROXY_HOST}\""
                          # Delete clusters after tests are executed
                          echo "INFO: Delete clusters"
                          ssh ${OPTIONS} -i ${PRIVATE_KEY} ${SSH_USER}@${JUMP_HOST} 'bash -s' <<ENDSSH
                            set -e
                            # Parameter checks
                            WRAPPER_OPTIONS="--only-delete-clusters --path ${REMOTE_WORKSPACE}/run-${RUN_FOLDER}"
                            if [ -z ${CONFIG_FILE_LOCATION} ] || [ ! -f ${CONFIG_FILE_LOCATION} ] ; then
                              echo "ERROR: Config file ${CONFIG_FILE_LOCATION} not found, exiting..."
                              exit 1
                            else
                              WRAPPER_OPTIONS+=" --account-config ${CONFIG_FILE_LOCATION}"
                            fi
                            [ ! -z ${LOG_LEVEL} ] && WRAPPER_OPTIONS+=" --log-level ${LOG_LEVEL}"
                            [ ! -z ${LOG_FILE} ] && WRAPPER_OPTIONS+=" --log-file ${REMOTE_WORKSPACE}/run-${RUN_FOLDER}/${LOG_FILE}"
                            [ ! -z "${WRAPPER_ARGUMENTS}" ] && WRAPPER_OPTIONS+=" ${WRAPPER_ARGUMENTS}"

                            [[ "${WRAPPER_ARGUMENTS}" != *"--command"* ]] && WRAPPER_OPTIONS+=" --command ${REMOTE_WORKSPACE}/run-${RUN_FOLDER}/osde2e/out"
                            # if --command is not included as argument on ${WRAPPER_ARGUMENTS}, osde2e tool will be compiled during the
                            # installation phase on first wrapper execution at ${REMOTE_WORKSPACE}/run-${RUN_FOLDER}/osde2e so we need
                            # to specify that folder as --command to avoid recompile it (and fail, because git clone will fail as folder is not empty)

                            echo "INFO: Running python3 ${REMOTE_WORKSPACE}/run-${RUN_FOLDER}/perfscale-managed-services/osde2e/osde2e-wrapper.py \${WRAPPER_OPTIONS}"
                            python3 ${REMOTE_WORKSPACE}/run-${RUN_FOLDER}/perfscale-managed-services/osde2e/osde2e-wrapper.py \${WRAPPER_OPTIONS}
                          ENDSSH
      - archive:
          artifacts: 'artifacts/**/*'
          excludes: 'artifacts/perfscale-managed-services/**/*,artifacts/osde2e/**/*,artifacts/account_config.yaml,artifacts/**/cluster_account.yaml'
          allow-empty: 'true'
      - workspace-cleanup
    triggers: []
    wrappers:
      - timestamps
      - workspace-cleanup
      - mask-passwords
      - ansicolor:
          colormap: xterm
