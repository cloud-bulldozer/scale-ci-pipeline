- job:
    block-downstream: false
    block-upstream: false
    builders:
    - shell: |-
        set -x

        if [[ ! -d "${WORKSPACE}/perf-dept" ]]; then
        git clone https://${GITHUB_TOKEN}@github.com/redhat-performance/perf-dept.git
        fi
        export PRIVATE_KEY=${WORKSPACE}/perf-dept/ssh_keys/id_rsa_pbench_ec2
        chmod 600 ${PRIVATE_KEY}
        export OPTIONS="-o StrictHostKeyChecking=no -o ServerAliveInterval=1 -o ConnectionAttempts=100"
        export KUBECONFIG="/root/.kube/config"


        export PBENCH_USER_BENCHMARK=""
        export PBENCH_COPY_RESULTS=""
        if [ "${ENABLE_PBENCH}" == "true" ]; then
        TEST_NAME="${TEST_NAME}.CONCURRENCY${CONCURRENCY}.INTERVAL${REFRESH_INTERVAL}.PERIOD${GRAPH_PERIOD}"
        export PBENCH_USER_BENCHMARK="pbench-user-benchmark -C ${TEST_NAME} -- "
        export PBENCH_COPY_RESULTS="pbench-copy-results --prefix prometheus_cd"
        fi

        export OPTIONS="-o StrictHostKeyChecking=no -o ServerAliveInterval=1 -o ConnectionAttempts=100"

        #ssh ${OPTIONS} -o ProxyCommand="ssh -i ${PRIVATE_KEY} -W %h:%p ${PROXY_USER}@${PROXY_HOST}" -i ${PRIVATE_KEY} ${MASTER_USER}@${MASTER_HOSTNAME} 'bash -s' <<ENDSSH
        echo `hostname`
        ssh ${OPTIONS} -i ${PRIVATE_KEY} ${USER}@${JUMP_HOST} 'bash -s' <<ENDSSH
        sudo su -
        echo "***********************************************************"
        #echo "$(ls /tmp/jenkins_prometheus)"
        if [[ -d "/root/scale-cd-jobs" ]]; then
        rm -rf /root/scale-cd-jobs
        fi
        git clone https://github.com/chaitanyaenr/scale-cd-jobs.git /root/scale-cd-jobs
        cd /root/scale-cd-jobs/build-scripts
        cd /root/svt/openshift_tooling/pbench
        if [[ $CONTAINERIZED == "true" ]]; then
        ./controller.sh
        else
        rm -rf /tmp/jenkins_prometheus/
        mkdir -p /tmp/jenkins_prometheus/
        cd /tmp/jenkins_prometheus/
        git clone https://github.com/openshift/svt.git
        cd svt/openshift_scalability/ci/scripts/prometheus/
        chmod +x 'prometheus-loader.sh'
        ./prometheus-loader.sh ${REFRESH_INTERVAL} ${CONCURRENCY} ${GRAPH_PERIOD} ${DURATION} ${ENABLE_PBENCH} '${PBENCH_COPY_RESULTS}' '${PBENCH_USER_BENCHMARK}' ${TEST_NAME}

        fi
        exit
        ENDSSH
    concurrent: true
    disabled: false
    name: SVT_prometheus_scaling
    parameters:
    - string:
        default: ''
        description: |-
          The openshift master hostname where the test needs to be run. This parameter can be a
          DNS name or ip address which can be used to SSH into the host.
        name: JUMP_HOST
    - string:
        default: root
        description: The user to use when sshing to the master server.
        name: USER
    - string:
        default: stack
        description: The name to use in the ssh ProxyCommand.
        name: PROXY_USER
    - bool:
        default: true
        description: When True run the conformance tests with pbench-user-benchmark
          command and copy the results.
        name: ENABLE_PBENCH
    - bool:
        default: false
        description: Use the ProxyCommand to access the OpenShift masters on private
          networks in the lab.
        name: USE_PROXY
    - string:
        default: ''
        description: The server to use in the ssh ProxyCommand.
        name: PROXY_HOST
    - string:
        default: '20'
        description: refresh interval to simulate grafana refresh, query execution
          interval (in secondes)
        name: REFRESH_INTERVAL
    - string:
        default: '10'
        description: requests \ queries in parallel
        name: CONCURRENCY
    - string:
        default: '15'
        description: desiered time period for data collection (in min)
        name: GRAPH_PERIOD
    - string:
        default: '9000'
        description: |-
          how long to monitor and loader promtheus (in secondes)
          default 9000 2.5 hours, to wait the prometheus tsdb dump each 2 hours
        name: DURATION
    - string:
        default: prometheus_scaling
        description: ''
        name: TEST_NAME
    - bool:
        default: false
        description: ''
        name: CONTAINERIZED
    - string:
        default: ''
        description: ''
        name: GITHUB_TOKEN
    project-type: freestyle
    properties:
    - build-discarder:
        artifact-days-to-keep: -1
        artifact-num-to-keep: -1
        days-to-keep: -1
        num-to-keep: 5
    - raw:
        xml: |
          <hudson.plugins.disk__usage.DiskUsageProperty plugin="disk-usage@0.28" />
    - raw:
        xml: |
          <com.dabsquared.gitlabjenkins.connection.GitLabConnectionProperty plugin="gitlab-plugin@1.5.3">
          <gitLabConnection />
          </com.dabsquared.gitlabjenkins.connection.GitLabConnectionProperty>
    - raw:
        xml: |
          <org.jenkinsci.plugins.ZMQEventPublisher.HudsonNotificationProperty plugin="zmq-event-publisher@0.0.5">
          <enabled>false</enabled>
          </org.jenkinsci.plugins.ZMQEventPublisher.HudsonNotificationProperty>
    - raw:
        xml: |
          <com.synopsys.arc.jenkins.plugins.ownership.jobs.JobOwnerJobProperty plugin="ownership@0.11.0">
          <ownership>
          <ownershipEnabled>true</ownershipEnabled>
          <primaryOwnerId>emarcian</primaryOwnerId>
          <coownersIds class="sorted-set" />
          </ownership>
          </com.synopsys.arc.jenkins.plugins.ownership.jobs.JobOwnerJobProperty>
    - raw:
        xml: |
          <com.sonyericsson.rebuild.RebuildSettings plugin="rebuild@1.27">
          <autoRebuild>false</autoRebuild>
          <rebuildDisabled>false</rebuildDisabled>
          </com.sonyericsson.rebuild.RebuildSettings>
    - raw:
        xml: |
          <hudson.plugins.throttleconcurrents.ThrottleJobProperty plugin="throttle-concurrents@2.0.1">
          <maxConcurrentPerNode>0</maxConcurrentPerNode>
          <maxConcurrentTotal>0</maxConcurrentTotal>
          <categories class="java.util.concurrent.CopyOnWriteArrayList" />
          <throttleEnabled>false</throttleEnabled>
          <throttleOption>project</throttleOption>
          <limitOneJobWithMatchingParams>false</limitOneJobWithMatchingParams>
          <paramsToUseForLimit />
          </hudson.plugins.throttleconcurrents.ThrottleJobProperty>
    publishers: []
    triggers: []
    wrappers:
    - ansicolor:
        colormap: xterm
